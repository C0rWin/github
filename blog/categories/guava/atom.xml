<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: guava | Short notes]]></title>
  <link href="http://pensieve.info/blog/categories/guava/atom.xml" rel="self"/>
  <link href="http://pensieve.info/"/>
  <updated>2014-08-19T13:00:41+03:00</updated>
  <id>http://pensieve.info/</id>
  <author>
    <name><![CDATA[C0rWin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Collections, Guava, reducing boilerplate code]]></title>
    <link href="http://pensieve.info/blog/2013/10/16/java-collections/"/>
    <updated>2013-10-16T15:11:00+03:00</updated>
    <id>http://pensieve.info/blog/2013/10/16/java-collections</id>
    <content type="html"><![CDATA[<p>Guava is a framework developed by Google to bridge the gap in Java SDK Collections API&rsquo;s. It introduces quite a lot of different techniques and development patterns which one was expecting to find in regular Collections API, but apparently wasn&rsquo;t able. I will try to show a few different techniques which helps me to reduce boilerplate code in my projects.</p>

<!-- more -->


<h3>1. Getting element at position i from Set.</h3>

<p>How often you&rsquo;ve seen something similar to following code?
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span> <span class="o">);</span>
</span><span class='line'><span class="n">names</span><span class="o">.</span><span class="na">add</span><span class="o">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">John</span> <span class="n">D</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'><span class="c1">// &amp;hellip;</span>
</span><span class='line'><span class="c1">// and then you realize you need to pull first item from your collection</span>
</span><span class='line'><span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">it</span> <span class="o">=</span> <span class="n">names</span><span class="o">.</span><span class="na">iterator</span><span class="o">(</span> <span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">firstName</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">(</span> <span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
 Or it might be even worse:</p>

<p> <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span> <span class="o">);</span>
</span><span class='line'> <span class="n">names</span><span class="o">.</span><span class="na">add</span><span class="o">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">John</span> <span class="n">D</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'> <span class="c1">// adding more names skipped.</span>
</span><span class='line'> <span class="c1">// and now we need 5th element from the set.</span>
</span><span class='line'> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">it</span> <span class="o">=</span> <span class="n">names</span><span class="o">.</span><span class="na">iterator</span><span class="o">(</span> <span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="k">for</span><span class="o">(</span> <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">it</span><span class="o">.</span><span class="na">hasNext</span><span class="o">(</span> <span class="o">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">idx</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="mi">4</span><span class="o">;</span> <span class="n">idx</span><span class="o">++,</span><span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">(</span> <span class="o">)</span> <span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Iterate over</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="n">String</span> <span class="n">fithElement</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span> <span class="n">it</span><span class="o">.</span><span class="na">hasNext</span><span class="o">(</span> <span class="o">))</span> <span class="o">{</span> <span class="c1">// We stoped because idx reached 4, hence skipped only 4 items.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">fithElement</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="na">hext</span><span class="o">(</span> <span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="o">}</span> <span class="k">else</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">fithElement</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p> To avoid writing again and again these lines of code Guava, introduces FluentIterable interface and util class Iterables which enables us to re-write lines from above as follows:</p>

<p> <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="c1">// Same initialization as previous</span>
</span><span class='line'> <span class="n">String</span> <span class="n">firstElement</span> <span class="o">=</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">get</span><span class="o">(</span> <span class="n">names</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'> <span class="c1">// And</span>
</span><span class='line'> <span class="n">String</span> <span class="n">fithElement</span> <span class="o">=</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">get</span><span class="o">(</span> <span class="n">names</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p> Or with edge cases of first or last element it might looks like:</p>

<p> <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">String</span> <span class="n">firstElement</span> <span class="o">=</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">getFirst</span><span class="o">(</span> <span class="n">names</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">defaultValue</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span> <span class="c1">// return first element from set of names</span>
</span><span class='line'> <span class="n">String</span> <span class="n">lastElement</span> <span class="o">=</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">getLast</span><span class="o">(</span> <span class="n">names</span><span class="o">);</span> <span class="c1">// return the last element</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>2. Finding element in collection of complex POJO.</h3>

<p>For now suppose we have a famous Person pojo, which looks like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="n">email</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getFirstName</span> <span class="o">(</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getLastName</span><span class="o">(</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getEmail</span><span class="o">(</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">email</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// omitting setters since not relevant for current demo/example.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we have a collection of persons say:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">people</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;(</span> <span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">John</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Doe</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#x61;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#x6a;&amp;#111;&amp;#x68;&amp;#x6e;&amp;#64;&amp;#100;&amp;#111;&amp;#101;&amp;#46;&amp;#x63;&amp;#111;&amp;#x6d;&quot;</span><span class="o">&gt;&amp;</span><span class="err">#</span><span class="n">x6a</span><span class="o">;&amp;</span><span class="err">#</span><span class="n">x6f</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">104</span><span class="o">;&amp;</span><span class="err">#</span><span class="n">x6e</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">64</span><span class="o">;&amp;</span><span class="err">#</span><span class="n">x64</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">111</span><span class="o">;&amp;</span><span class="err">#</span><span class="n">x65</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">46</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">99</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">111</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">109</span><span class="o">;&lt;/</span><span class="n">a</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="o">;));</span>
</span><span class='line'><span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">William</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">McLoren</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#x61;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#x3a;&amp;#x77;&amp;#x69;&amp;#108;&amp;#108;&amp;#x69;&amp;#97;&amp;#109;&amp;#x40;&amp;#109;&amp;#x63;&amp;#x6c;&amp;#111;&amp;#x72;&amp;#101;&amp;#110;&amp;#46;&amp;#99;&amp;#x6f;&amp;#109;&quot;</span><span class="o">&gt;&amp;</span><span class="err">#</span><span class="n">x77</span><span class="o">;&amp;</span><span class="err">#</span><span class="n">x69</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">108</span><span class="o">;&amp;</span><span class="err">#</span><span class="n">x6c</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">105</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">97</span><span class="o">;&amp;</span><span class="err">#</span><span class="n">x6d</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">64</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">109</span><span class="o">;&amp;</span><span class="err">#</span><span class="n">x63</span><span class="o">;&amp;</span><span class="err">#</span><span class="n">x6c</span><span class="o">;&amp;</span><span class="err">#</span><span class="n">x6f</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">114</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">101</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">110</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">46</span><span class="o">;&amp;</span><span class="err">#</span><span class="n">x63</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">111</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">109</span><span class="o">;&lt;/</span><span class="n">a</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="o">;));</span>
</span><span class='line'><span class="c1">//&amp;hellip;</span>
</span><span class='line'><span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span>  <span class="k">new</span> <span class="n">Person</span><span class="o">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Bruce</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Jonson</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#x74;&amp;#111;&amp;#x3a;&amp;#x62;&amp;#114;&amp;#x75;&amp;#x63;&amp;#101;&amp;#64;&amp;#106;&amp;#111;&amp;#110;&amp;#115;&amp;#111;&amp;#x6e;&amp;#x2e;&amp;#x63;&amp;#111;&amp;#109;&quot;</span><span class="o">&gt;&amp;</span><span class="err">#</span><span class="mi">98</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">114</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">117</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">99</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">101</span><span class="o">;&amp;</span><span class="err">#</span><span class="n">x40</span><span class="o">;&amp;</span><span class="err">#</span><span class="n">x6a</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">111</span><span class="o">;&amp;</span><span class="err">#</span><span class="n">x6e</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">115</span><span class="o">;&amp;</span><span class="err">#</span><span class="n">x6f</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">110</span><span class="o">;&amp;</span><span class="err">#</span><span class="n">x2e</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">99</span><span class="o">;&amp;</span><span class="err">#</span><span class="n">x6f</span><span class="o">;&amp;</span><span class="err">#</span><span class="mi">109</span><span class="o">;&lt;/</span><span class="n">a</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="o">;));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we need to lookup from this collection all persons with name &ldquo;John&rdquo;. With plain Java Collections SDK it might look like:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Person</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span> <span class="n">Person</span> <span class="nl">each:</span> <span class="n">people</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">(</span> <span class="s">&quot;John&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span> <span class="n">each</span><span class="o">.</span><span class="na">getFirstName</span><span class="o">(</span> <span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">each</span><span class="o">;</span>
</span><span class='line'>    <span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span> <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Guava Iterables utils class introduce find method which get two parameters an intance of Iterable interface and Predicate, method iterates over all elements and returns back on those which muches the predicate (e.g. predicate return true for them). Now it became:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">FirstNamePredicate</span> <span class="kd">implements</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">FirstNamePredicate</span><span class="o">(</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Overide</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span> <span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">firstName</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span> <span class="n">person</span><span class="o">.</span><span class="na">getFirstName</span><span class="o">(</span> <span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// and now we can use it to seach element we would like from given collection.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">find</span><span class="o">(</span> <span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">FirstNamePredicate</span><span class="o">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">John</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;));&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Basically one line will do the work, while previously we have had to use for each loop. Now one could possibly argue and say &ldquo;Wait a moment! Instead of simple for each you have written done a whole class!&rdquo;. And my answer for that yes of course I did! Now I do able to reuse my code, now I then I&rsquo;ve lookup logic decoupled I can easily test it. Moreover this is just one simple example, but as you can imagine it could be much more complicated then this specific one.</p>

<p>Now, we have to pay attention on the fact that find method will result in run-time exception in case element is not found which will lead to following code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Iterable</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Person</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">find</span><span class="o">(</span> <span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">FIrstNamePredicate</span><span class="o">(</span> <span class="s">&quot;John&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">catch</span> <span class="o">(</span> <span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// And here need to take care of cases where element is not found.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A much nicer way will be to use recently introduced new method of <strong>Iterables</strong> which is <strong>tryFind</strong>, as a result it will return instance of <strong>Optional</strong> and in case there is no such element in collection instead of having to handle exceptional case now you can simply :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Optional</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">tryFind</span><span class="o">(</span> <span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">FIrstNamePredicate</span><span class="o">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">John</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;));</span>
</span><span class='line'><span class="c1">// and now you can check whenever value of object is presented</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span> <span class="n">result</span><span class="o">.</span><span class="na">isPresent</span><span class="o">(</span> <span class="o">))</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">handleResult</span><span class="o">(</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span> <span class="o">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span> <span class="k">else</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">handleNoResult</span><span class="o">(</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Or it could be even:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Optional</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">tryFind</span><span class="o">(</span> <span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">FIrstNamePredicate</span><span class="o">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">John</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)).</span><span class="na">or</span><span class="o">(</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">UFO</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Alien</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;));</span>
</span><span class='line'><span class="c1">// and it will always will return you optional result with some value</span>
</span><span class='line'><span class="c1">// hence no need to check for presence you can simple call get method</span>
</span><span class='line'><span class="c1">// of course you will have to handle default value differently.</span>
</span><span class='line'><span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span> <span class="o">);</span>
</span><span class='line'><span class="n">handleResult</span><span class="o">(</span> <span class="n">person</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>3. Building map and reverse map.</h3>

<p>Sometimes you have to build up some dictionary on your Java code, e.g. you have set of relations between two entity types and could be even between entity and Java primitives. Say you have key of type <strong>A</strong> and value of type <strong>B</strong>. You probably will finish with writing something like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">&gt;</span> <span class="n">dictionary</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">&gt;(</span> <span class="o">);</span>
</span><span class='line'><span class="c1">// now the initialization loop</span>
</span><span class='line'> <span class="k">while</span> <span class="o">(</span> <span class="n">it</span><span class="o">.</span><span class="na">hasMore</span><span class="o">(</span> <span class="o">))</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">B</span> <span class="n">val</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">(</span> <span class="o">);</span>
</span><span class='line'><span class="n">A</span> <span class="n">key</span> <span class="o">=</span> <span class="n">computeKey</span><span class="o">(</span> <span class="n">val</span><span class="o">);</span>
</span><span class='line'><span class="n">dictionary</span><span class="o">.</span><span class="na">put</span><span class="o">(</span> <span class="n">key</span><span class="o">,</span> <span class="n">val</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>But now, suppose that relation between <strong>A</strong> and <strong>B</strong> is one to one and you would like to have possibility to make look up for values in both directions, so the code now will look like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">&gt;</span> <span class="n">dictionary</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">&gt;(</span> <span class="o">);</span>
</span><span class='line'><span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">B</span><span class="o">,</span> <span class="n">A</span><span class="o">&gt;</span> <span class="n">reverseDictionary</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">B</span><span class="o">,</span> <span class="n">A</span><span class="o">&gt;(</span> <span class="o">)</span>
</span><span class='line'><span class="c1">// now the initialization loop</span>
</span><span class='line'> <span class="k">while</span> <span class="o">(</span> <span class="n">it</span><span class="o">.</span><span class="na">hasMore</span><span class="o">(</span> <span class="o">))</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">B</span> <span class="n">val</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">(</span> <span class="o">);</span>
</span><span class='line'><span class="n">A</span> <span class="n">key</span> <span class="o">=</span> <span class="n">computeKey</span><span class="o">(</span> <span class="n">val</span><span class="o">);</span>
</span><span class='line'><span class="n">dictionary</span><span class="o">.</span><span class="na">put</span><span class="o">(</span> <span class="n">key</span><span class="o">,</span> <span class="n">val</span><span class="o">);</span>
</span><span class='line'><span class="n">reverseDictionary</span><span class="o">(</span> <span class="n">val</span><span class="o">,</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="c1">// now we able to make lookup in both directions</span>
</span><span class='line'> <span class="c1">// say having key we can get value:</span>
</span><span class='line'> <span class="n">B</span> <span class="n">val</span> <span class="o">=</span> <span class="n">dictionary</span><span class="o">.</span><span class="na">get</span><span class="o">(</span> <span class="n">key</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="c1">// or having value we can get a key</span>
</span><span class='line'> <span class="n">A</span> <span class="n">key</span> <span class="o">=</span> <span class="n">reverseDictionary</span><span class="o">(</span> <span class="n">val</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Guava introduce new collection type called <strong>BiMap</strong>, which is bidirectional map, designed to answer the question similar to current example, so instead of having code above we can simply write:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">BiMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">&gt;</span> <span class="n">dictionary</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashBiMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">&gt;(</span> <span class="o">);</span>
</span><span class='line'><span class="c1">// now the initialization loop</span>
</span><span class='line'> <span class="k">while</span> <span class="o">(</span> <span class="n">it</span><span class="o">.</span><span class="na">hasMore</span><span class="o">(</span> <span class="o">))</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">B</span> <span class="n">val</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">(</span> <span class="o">);</span>
</span><span class='line'><span class="n">A</span> <span class="n">key</span> <span class="o">=</span> <span class="n">computeKey</span><span class="o">(</span> <span class="n">val</span><span class="o">);</span>
</span><span class='line'><span class="n">dictionary</span><span class="o">.</span><span class="na">put</span><span class="o">(</span> <span class="n">key</span><span class="o">,</span> <span class="n">val</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="c1">// now in order to get key for a value we have to do:</span>
</span><span class='line'> <span class="n">A</span> <span class="n">key</span> <span class="o">=</span> <span class="n">dictionary</span><span class="o">.</span><span class="na">inverse</span><span class="o">(</span> <span class="o">).</span><span class="na">get</span><span class="o">(</span> <span class="n">val</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There is much more things and useful functionality provided by Guava, I&rsquo;ll continue to describe uses cases and method which will allow to remove boiler plate and redundant code.</p>
]]></content>
  </entry>
  
</feed>
