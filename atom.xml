<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Short notes]]></title>
  <link href="http://pensieve.info/atom.xml" rel="self"/>
  <link href="http://pensieve.info/"/>
  <updated>2014-08-19T13:00:41+03:00</updated>
  <id>http://pensieve.info/</id>
  <author>
    <name><![CDATA[C0rWin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Computing HITS algorithm with Map-Reduce and MongoDB.]]></title>
    <link href="http://pensieve.info/blog/2013/12/03/computing-hits-algorithm-with-map-reduce-and-mongodb/"/>
    <updated>2013-12-03T01:27:00+02:00</updated>
    <id>http://pensieve.info/blog/2013/12/03/computing-hits-algorithm-with-map-reduce-and-mongodb</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve tackled the goal to compute HITS algorithm on large graph which represent different types of links among documents. HITS algorithm was first designed and developed by <a href="http://www.cs.cornell.edu/home/kleinber/">Jon Kleinberg</a> from Cornell University, you can read more details on <a href="http://en.wikipedia.org/wiki/HITS_algorithm">wiki</a> or in his original paper <a href="http://www.cs.cornell.edu/home/kleinber/auth.pdf">&ldquo;Authoritative Sources in a Hyperlinked Environment&rdquo;</a>.</p>

<p>Briefly the main idea is, given directed graph $G=(V,E)$, we define $B_{in}(v)=&#92;{u | \, (u,v) \in E&#92;}$, all vertices which links to node $v$. Similarly we will define $B_{out}(v)=&#92;{ u | (v,u) \in E&#92;}$, all vertices which node $v$ points to. Having these definitions now we can define recursive relationships to compute authority and hub scores, iteration $n+1$ we be equals to:</p>

<ul>
<li>The &ldquo;authority&rdquo; score defined as $a_{n+1}(v)=\frac{1}{ \sqrt{ \sum_{u \in B_{in}(v)}h_n(u)^2}}\sum_{u \in B_{in}(v)}h_{n}(u)$</li>
<li>And hub score is $h_{n+1}(v)=\frac{1}{\sqrt{ \sum_{u \in B_{out}(v)}a_n(u)^2}}\sum_{u \in B_{out}}a_{n}(u)$</li>
</ul>


<p>(we have to normalize weights in order for process to converge)</p>

<p>Now, once we are talking of huge graph, very first thing which came in my mind is to setup Hadoop cluster, model the graph and run computation on it. The fact that HITS computation easily fits model of map-reduce makes it even more preferable approach.</p>

<p>One of my goals was to learn/view the results almost immediately without any additional tooling or code writing, being able to change the model and different parts of computation process. Well, after few hours I&rsquo;ve spend reading Hadoop manuals I understood that task going to be not that easy as expected, since class which represent graph entity has to implement <a href="http://hadoop.apache.org/docs/current/api/org/apache/hadoop/io/Writable.html">Writable</a> interface to enable Hadoop framework to serialize or deserialize object into/from HDFS (HaDoop File System). It became even worse when I understood that there is no easy way to view results of execution, since I&rsquo;ve to write my own viewer of the results to view serialized results in HDFS (I&rsquo;m not saying this is too complicated or hard, just wanted to make it as easy as possible with writing less code). At this point I&rsquo;ve realised that MongoDB has its own <a href="http://docs.mongodb.org/manual/core/map-reduce/">map-reduce</a> engine, so decided to spent few more minutes to understand how it works and whenever I can leverage from it. After several minutes of reading I&rsquo;ve understood that this is exactly that I was looking for.</p>

<ul>
<li>I can setup cluster of MongoDB, to be able to process large dataset.</li>
<li>Writing map-reduce functionality is simple as just writing two javascript functions.</li>
<li>Can use mongo client to connect to database and execute queries in order to see the results.</li>
<li>In case I need to adjust something in algorithm or add something there is no need to recompile code (like in case of Hadoop), just rewrite map or reduce function and execute it immediately on MongoDB client.</li>
</ul>


<p>Here I&rsquo;ll try to explain that exactly I did and how it works.</p>

<!-- more -->


<h3>1. Produce initial collection.</h3>

<p>First step I&rsquo;ve dumped my graph into MongoDB collection, where each entry looks like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>   
</span><span class='line'><span class="nx">label</span> <span class="o">:</span> <span class="s2">&quot;nodeName&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">score</span> <span class="o">:</span> <span class="mf">1.0</span><span class="p">,</span>  
</span><span class='line'>  <span class="nx">links</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="nx">label</span> <span class="o">:</span> <span class="s2">&quot;childNodeName1&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">score</span> <span class="o">:</span> <span class="mf">1.0</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>          <span class="p">...</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>  
</span></code></pre></td></tr></table></div></figure>


<p>for tutorial purpose I&rsquo;ll assume collection name is &ldquo;graph&rdquo;.</p>

<p>Meaning I&rsquo;ve model the graph with adjacency list, e.g. each node has it&rsquo;s own record with list of others node it connects to. Scores for everyone initialised to 1 (doesn&rsquo;t really matter it will converge anyway, but much easier for debugging, and not sure if I can say something wise about convergence speed).
Here we can pay attention that using this collection is very intuitive to compute hub score for each node, since we have a list of all children. All we need is to iterate over list of items, sum points for each item, therefore receiving the hub score.</p>

<p>Next step I splitted computation of authority and hubs between two collections, first one to handle nodes and outlinks and second one is to keep nodes and inlinks. Therefore one collection became output for map reduce action on another. So next stage is to initialise them and provide map reduce functions, to be able to run the computation.</p>

<h3>2. The initialization.</h3>

<p>First step I&rsquo;ll write map function to initialize hubs collections and then reduce function.</p>

<figure class='code'><figcaption><span>map </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">links</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">emit</span><span class="p">(</span> <span class="p">{</span> <span class="nx">label</span><span class="o">:</span> <span class="nx">that</span><span class="p">.</span><span class="nx">label</span><span class="p">,</span> <span class="nx">score</span><span class="o">:</span> <span class="nx">that</span><span class="p">.</span><span class="nx">score</span><span class="p">},</span> <span class="nx">item</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The purpose why this mapper function looks like that is to make collection to look like output of map reduce on MongoDB.</p>

<p>Next we need to write reducer which will has to answer all requirements of MongoDB <a href="http://docs.mongodb.org/manual/core/map-reduce/">map reduce</a> framework:</p>

<figure class='code'><figcaption><span>reduce </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">reduce</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">values</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">values</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="nx">item</span><span class="p">.</span><span class="nx">links</span><span class="p">)</span>  <span class="p">{</span> <span class="c1">// to handle consequence invocations of reducer</span>
</span><span class='line'>          <span class="nx">item</span><span class="p">.</span><span class="nx">links</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">item</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="nx">item</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">links</span> <span class="o">:</span> <span class="nx">result</span><span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally in order to unify output of the computation I&rsquo;ll provide finalize function:</p>

<figure class='code'><figcaption><span>finalizer </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">finalizer</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="nx">val</span><span class="p">.</span><span class="nx">list</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">val</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">list</span> <span class="o">:</span> <span class="p">[</span><span class="nx">val</span><span class="p">]};</span>      
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here we go to produce first collection to start with calculations:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.graph.mapReduce( map, reduce, { out : "graph_hubs", finalize : finalizer});</span></code></pre></td></tr></table></div></figure>


<p>This will produce startup point and collection called graph_hubs, which we going to use to compute authority scores and create second collection. Output will look like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">label</span> <span class="o">:</span> <span class="s2">&quot;nodeName&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">score</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">value</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">list</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="nx">label</span> <span class="o">:</span> <span class="s2">&quot;childNodeName&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">score</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">...</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. Universal mapper function.</h3>

<p>I&rsquo;ve the initialization step, since I&rsquo;d like to have both authority and hubs collections look the same, so now I can provide some generic function which during mapping values will also compute authority or hub score (depends on which collection we execute the code).</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">universMap</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">weight</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">links</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">score</span> <span class="o">+=</span> <span class="nx">item</span><span class="p">.</span><span class="nx">score</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">weight</span> <span class="o">+=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span> <span class="nx">item</span><span class="p">.</span><span class="nx">score</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">links</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">emit</span><span class="p">(</span> <span class="nx">item</span><span class="p">,</span> <span class="p">{</span> <span class="nx">label</span> <span class="o">:</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_id</span><span class="p">.</span><span class="nx">label</span><span class="p">,</span> <span class="nx">score</span> <span class="o">:</span> <span class="nx">score</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span> <span class="nx">weight</span><span class="p">)});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. Computation.</h3>

<p>Ok, we setup and ready to go with calculation process, for sake of simplicity I&rsquo;m going to perform iterations without really checking whenever process indeed converges given some thresthold.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">for</span> <span class="p">(</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">db</span><span class="p">.</span><span class="nx">graph_hubs</span><span class="p">.</span><span class="nx">mapReduce</span><span class="p">(</span> <span class="nx">universMap</span><span class="p">,</span> <span class="nx">reduce</span><span class="p">,</span> <span class="p">{</span> <span class="nx">out</span> <span class="o">:</span> <span class="s2">&quot;graph_auths&quot;</span><span class="p">,</span> <span class="nx">finalize</span> <span class="o">:</span> <span class="nx">finalizer</span><span class="p">});</span>
</span><span class='line'>  <span class="nx">db</span><span class="p">.</span><span class="nx">graph_auths</span><span class="p">.</span><span class="nx">mapReduce</span><span class="p">(</span> <span class="nx">universMap</span><span class="p">,</span> <span class="nx">reduce</span><span class="p">,</span> <span class="p">{</span> <span class="nx">out</span> <span class="o">:</span> <span class="s2">&quot;graph_hubs&quot;</span><span class="p">,</span> <span class="nx">finalize</span> <span class="o">:</span> <span class="nx">finalizer</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5. Getting results.</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="nx">db</span><span class="p">.</span><span class="nx">graph_auth</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span> <span class="p">{},</span> <span class="p">{</span> <span class="nx">_id</span> <span class="o">:</span> <span class="mi">1</span><span class="p">}).</span><span class="nx">sort</span><span class="p">(</span> <span class="p">{</span> <span class="s2">&quot;\_id.score&quot;</span><span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">}).</span><span class="nx">limit</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Command above will return us top-20 nodes with highest authority score (similar code will return the top-20 for hubs score).</p>

<p>We can use same <a href="http://docs.mongodb.org/manual/core/map-reduce/">map reduce</a> framework to join results from both collections to have them in one place. Now the next step I&rsquo;m working on is to compute page rank score using same technique.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Collections, Guava, reducing boilerplate code]]></title>
    <link href="http://pensieve.info/blog/2013/10/16/java-collections/"/>
    <updated>2013-10-16T15:11:00+03:00</updated>
    <id>http://pensieve.info/blog/2013/10/16/java-collections</id>
    <content type="html"><![CDATA[<p>Guava is a framework developed by Google to bridge the gap in Java SDK Collections API&rsquo;s. It introduces quite a lot of different techniques and development patterns which one was expecting to find in regular Collections API, but apparently wasn&rsquo;t able. I will try to show a few different techniques which helps me to reduce boilerplate code in my projects.</p>

<!-- more -->


<h3>1. Getting element at position i from Set.</h3>

<p>How often you&rsquo;ve seen something similar to following code?</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span> <span class="o">);</span>
</span><span class='line'><span class="n">names</span><span class="o">.</span><span class="na">add</span><span class="o">(</span> <span class="s">&quot;John D.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="c1">// and then you realize you need to pull first item from your collection</span>
</span><span class='line'><span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">it</span> <span class="o">=</span> <span class="n">names</span><span class="o">.</span><span class="na">iterator</span><span class="o">(</span> <span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">firstName</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">(</span> <span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p> Or it might be even worse:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span> <span class="o">);</span>
</span><span class='line'> <span class="n">names</span><span class="o">.</span><span class="na">add</span><span class="o">(</span> <span class="s">&quot;John D.&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="c1">// adding more names skipped.</span>
</span><span class='line'> <span class="c1">// and now we need 5th element from the set.</span>
</span><span class='line'> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">it</span> <span class="o">=</span> <span class="n">names</span><span class="o">.</span><span class="na">iterator</span><span class="o">(</span> <span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="k">for</span><span class="o">(</span> <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">it</span><span class="o">.</span><span class="na">hasNext</span><span class="o">(</span> <span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="n">idx</span><span class="o">++,</span><span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">(</span> <span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Iterate over</span>
</span><span class='line'>
</span><span class='line'> <span class="n">String</span> <span class="n">fithElement</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span> <span class="n">it</span><span class="o">.</span><span class="na">hasNext</span><span class="o">(</span> <span class="o">))</span> <span class="o">{</span> <span class="c1">// We stoped because idx reached 4, hence skipped only 4 items.</span>
</span><span class='line'>  <span class="n">fithElement</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="na">hext</span><span class="o">(</span> <span class="o">);</span>
</span><span class='line'> <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">fithElement</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p> To avoid writing again and again these lines of code Guava, introduces FluentIterable interface and util class Iterables which enables us to re-write lines from above as follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="c1">// Same initialization as previous</span>
</span><span class='line'> <span class="n">String</span> <span class="n">firstElement</span> <span class="o">=</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">get</span><span class="o">(</span> <span class="n">names</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'> <span class="c1">// And</span>
</span><span class='line'> <span class="n">String</span> <span class="n">fithElement</span> <span class="o">=</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">get</span><span class="o">(</span> <span class="n">names</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p> Or with edge cases of first or last element it might looks like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">String</span> <span class="n">firstElement</span> <span class="o">=</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">getFirst</span><span class="o">(</span> <span class="n">names</span><span class="o">,</span> <span class="s">&quot;defaultValue&quot;</span><span class="o">);</span> <span class="c1">// return first element from set of names</span>
</span><span class='line'> <span class="n">String</span> <span class="n">lastElement</span> <span class="o">=</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">getLast</span><span class="o">(</span> <span class="n">names</span><span class="o">);</span> <span class="c1">// return the last element</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h3>2. Finding element in collection of complex POJO.</h3>

<p>For now suppose we have a famous Person pojo, which looks like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">email</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getFirstName</span> <span class="o">(</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getLastName</span><span class="o">(</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getEmail</span><span class="o">(</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">email</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// omitting setters since not relevant for current demo/example.</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have a collection of persons say:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">people</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;(</span> <span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span> <span class="s">&quot;John&quot;</span><span class="o">,</span> <span class="s">&quot;Doe&quot;</span><span class="o">,</span> <span class="s">&quot;john@doe.com&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span> <span class="s">&quot;William&quot;</span><span class="o">,</span> <span class="s">&quot;McLoren&quot;</span><span class="o">,</span> <span class="s">&quot;william@mcloren.com&quot;</span><span class="o">));</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="n">people</span><span class="o">.</span><span class="na">add</span><span class="o">(</span>  <span class="k">new</span> <span class="n">Person</span><span class="o">(</span> <span class="s">&quot;Bruce&quot;</span><span class="o">,</span> <span class="s">&quot;Jonson&quot;</span><span class="o">,</span> <span class="s">&quot;bruce@jonson.com&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to lookup from this collection all persons with name &ldquo;John&rdquo;. With plain Java Collections SDK it might look like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Person</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span> <span class="n">Person</span> <span class="nl">each:</span> <span class="n">people</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span> <span class="s">&quot;John&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span> <span class="n">each</span><span class="o">.</span><span class="na">getFirstName</span><span class="o">(</span> <span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">each</span><span class="o">;</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>  
</span></code></pre></td></tr></table></div></figure>


<p>Guava Iterables utils class introduce find method which get two parameters an intance of Iterable interface and Predicate, method iterates over all elements and returns back on those which muches the predicate (e.g. predicate return true for them). Now it became:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">FirstNamePredicate</span> <span class="kd">implements</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">FirstNamePredicate</span><span class="o">(</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="nd">@Overide</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span> <span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">firstName</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span> <span class="n">person</span><span class="o">.</span><span class="na">getFirstName</span><span class="o">(</span> <span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// and now we can use it to seach element we would like from given collection.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">find</span><span class="o">(</span> <span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">FirstNamePredicate</span><span class="o">(</span> <span class="s">&quot;John&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically one line will do the work, while previously we have had to use for each loop. Now one could possibly argue and say &ldquo;Wait a moment! Instead of simple for each you have written done a whole class!&rdquo;. And my answer for that yes of course I did! Now I do able to reuse my code, now I then I&rsquo;ve lookup logic decoupled I can easily test it. Moreover this is just one simple example, but as you can imagine it could be much more complicated then this specific one.</p>

<p>Now, we have to pay attention on the fact that find method will result in run-time exception in case element is not found which will lead to following code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">find</span><span class="o">(</span> <span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">FIrstNamePredicate</span><span class="o">(</span> <span class="s">&quot;John&quot;</span><span class="o">));</span>
</span><span class='line'><span class="k">catch</span> <span class="o">(</span> <span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// And here need to take care of cases where element is not found.</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A much nicer way will be to use recently introduced new method of <strong>Iterables</strong> which is <strong>tryFind</strong>, as a result it will return instance of <strong>Optional</strong> and in case there is no such element in collection instead of having to handle exceptional case now you can simply :</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Optional</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">tryFind</span><span class="o">(</span> <span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">FIrstNamePredicate</span><span class="o">(</span> <span class="s">&quot;John&quot;</span><span class="o">));</span>
</span><span class='line'><span class="c1">// and now you can check whenever value of object is presented</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span> <span class="n">result</span><span class="o">.</span><span class="na">isPresent</span><span class="o">(</span> <span class="o">))</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">handleResult</span><span class="o">(</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span> <span class="o">));</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">handleNoResult</span><span class="o">(</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or it could be even:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Optional</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Iterables</span><span class="o">.</span><span class="na">tryFind</span><span class="o">(</span> <span class="n">people</span><span class="o">,</span> <span class="k">new</span> <span class="n">FIrstNamePredicate</span><span class="o">(</span> <span class="s">&quot;John&quot;</span><span class="o">)).</span><span class="na">or</span><span class="o">(</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span> <span class="s">&quot;UFO&quot;</span><span class="o">,</span><span class="s">&quot;Alien&quot;</span><span class="o">));</span>
</span><span class='line'><span class="c1">// and it will always will return you optional result with some value</span>
</span><span class='line'><span class="c1">// hence no need to check for presence you can simple call get method</span>
</span><span class='line'><span class="c1">// of course you will have to handle default value differently.</span>
</span><span class='line'><span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span> <span class="o">);</span>
</span><span class='line'><span class="n">handleResult</span><span class="o">(</span> <span class="n">person</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. Building map and reverse map.</h3>

<p>Sometimes you have to build up some dictionary on your Java code, e.g. you have set of relations between two entity types and could be even between entity and Java primitives. Say you have key of type <strong>A</strong> and value of type <strong>B</strong>. You probably will finish with writing something like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">&gt;</span> <span class="n">dictionary</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">&gt;(</span> <span class="o">);</span>
</span><span class='line'><span class="c1">// now the initialization loop</span>
</span><span class='line'> <span class="k">while</span> <span class="o">(</span> <span class="n">it</span><span class="o">.</span><span class="na">hasMore</span><span class="o">(</span> <span class="o">))</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">B</span> <span class="n">val</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">(</span> <span class="o">);</span>
</span><span class='line'>  <span class="n">A</span> <span class="n">key</span> <span class="o">=</span> <span class="n">computeKey</span><span class="o">(</span> <span class="n">val</span><span class="o">);</span>
</span><span class='line'>  <span class="n">dictionary</span><span class="o">.</span><span class="na">put</span><span class="o">(</span> <span class="n">key</span><span class="o">,</span> <span class="n">val</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But now, suppose that relation between <strong>A</strong> and <strong>B</strong> is one to one and you would like to have possibility to make look up for values in both directions, so the code now will look like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">&gt;</span> <span class="n">dictionary</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">&gt;(</span> <span class="o">);</span>
</span><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="n">B</span><span class="o">,</span> <span class="n">A</span><span class="o">&gt;</span> <span class="n">reverseDictionary</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">B</span><span class="o">,</span> <span class="n">A</span><span class="o">&gt;(</span> <span class="o">)</span>
</span><span class='line'><span class="c1">// now the initialization loop</span>
</span><span class='line'> <span class="k">while</span> <span class="o">(</span> <span class="n">it</span><span class="o">.</span><span class="na">hasMore</span><span class="o">(</span> <span class="o">))</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">B</span> <span class="n">val</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">(</span> <span class="o">);</span>
</span><span class='line'>  <span class="n">A</span> <span class="n">key</span> <span class="o">=</span> <span class="n">computeKey</span><span class="o">(</span> <span class="n">val</span><span class="o">);</span>
</span><span class='line'>  <span class="n">dictionary</span><span class="o">.</span><span class="na">put</span><span class="o">(</span> <span class="n">key</span><span class="o">,</span> <span class="n">val</span><span class="o">);</span>
</span><span class='line'>  <span class="n">reverseDictionary</span><span class="o">(</span> <span class="n">val</span><span class="o">,</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">// now we able to make lookup in both directions</span>
</span><span class='line'> <span class="c1">// say having key we can get value:</span>
</span><span class='line'> <span class="n">B</span> <span class="n">val</span> <span class="o">=</span> <span class="n">dictionary</span><span class="o">.</span><span class="na">get</span><span class="o">(</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">// or having value we can get a key</span>
</span><span class='line'> <span class="n">A</span> <span class="n">key</span> <span class="o">=</span> <span class="n">reverseDictionary</span><span class="o">(</span> <span class="n">val</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Guava introduce new collection type called <strong>BiMap</strong>, which is bidirectional map, designed to answer the question similar to current example, so instead of having code above we can simply write:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">BiMap</span><span class="o">&lt;</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">&gt;</span> <span class="n">dictionary</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashBiMap</span><span class="o">&lt;</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">&gt;(</span> <span class="o">);</span>
</span><span class='line'><span class="c1">// now the initialization loop</span>
</span><span class='line'> <span class="k">while</span> <span class="o">(</span> <span class="n">it</span><span class="o">.</span><span class="na">hasMore</span><span class="o">(</span> <span class="o">))</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">B</span> <span class="n">val</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">(</span> <span class="o">);</span>
</span><span class='line'>  <span class="n">A</span> <span class="n">key</span> <span class="o">=</span> <span class="n">computeKey</span><span class="o">(</span> <span class="n">val</span><span class="o">);</span>
</span><span class='line'>  <span class="n">dictionary</span><span class="o">.</span><span class="na">put</span><span class="o">(</span> <span class="n">key</span><span class="o">,</span> <span class="n">val</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">// now in order to get key for a value we have to do:</span>
</span><span class='line'> <span class="n">A</span> <span class="n">key</span> <span class="o">=</span> <span class="n">dictionary</span><span class="o">.</span><span class="na">inverse</span><span class="o">(</span> <span class="o">).</span><span class="na">get</span><span class="o">(</span> <span class="n">val</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is much more things and useful functionality provided by Guava, I&rsquo;ll continue to describe uses cases and method which will allow to remove boiler plate and redundant code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Matlab code on Amazon cloud.]]></title>
    <link href="http://pensieve.info/blog/2013/10/08/running-matlab-code-on-amazon-cloud/"/>
    <updated>2013-10-08T00:04:00+03:00</updated>
    <id>http://pensieve.info/blog/2013/10/08/running-matlab-code-on-amazon-cloud</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve bumped into the need to have Matlab code running on Amazon cloud infrastructure. Moreover my Matlab application has to communicate with rest of the world, therefore I have  had to find some third party communication labrary for Matlab which will do the work. It&rsquo;s long story why do I need this, but googling around I&rsquo;ve found series of the blog entries, which explains in details how to do it, basically it also explains the reason why do I need to do it.</p>

<ol>
<li><a href="http://noisyaccumulation.blogspot.co.il/2010/09/using-amazon-ec2-to-speed-up-matlab.html">Using Amazon EC2 to speed up matlab optimisation</a></li>
<li><a href="http://noisyaccumulation.blogspot.co.il/2010/12/using-amazon-ec2-to-speed-up-matlab.html">Writing a socket interface in Matlab to send / receive the commands</a></li>
<li><a href="http://noisyaccumulation.blogspot.com/2010/12/using-amazon-ec2-to-speed-up-matlab_22.html">Setting up an Ubuntu EC2 instance to run the compiled Matlab code</a></li>
<li><a href="http://noisyaccumulation.blogspot.com/2010/12/using-amazon-ec2-to-speed-up-matlab_9326.html">Writing matlab software to communicate with the server.</a></li>
</ol>


<p>As you may probably guess were this strightforward procees I&rsquo;ve never been spending my time to write this blog entry. Since I&rsquo;ve had to solve a couple of puzzles and tackled with quite a few trick I&rsquo;d like to memorize my expirience here, hopefully it will save time to more people later.</p>

<!-- more -->


<h3>1. First step, download msocket toolbox(set of wrappers for socket communication) .</h3>

<p>Msocket library located at <a href="http://code.google.com/p/msocket/">google code repository</a> and looks like nobody has touched for year or two and there were several changes in Matlab API since then. Therefore you will have to patch a bit code in this library to make it compile.</p>

<h5>1.1 Add include to matrix module (#include &lt;matrix.h>) for msrecv.cpp and msrecvraw.c.</h5>

<h5>1.2 Replace each occurence of <strong>&ldquo;mxCreateScalarDouble&rdquo;</strong> with <strong>&ldquo;mxCreateDoubleScalar&rdquo;</strong>.</h5>

<h5>1.3 Open msocket with Matlab and execute compileit, this will compile source code for you.</h5>

<h5>1.4 Add msocket library to Matlab path.</h5>

<p>Now you ready to implement your client/server application while leveraging mathematics capabilities of Matlab.</p>

<h3>2. Implement your client/server application.</h3>

<p>I will skip this part, mainly because it&rsquo;s greatly covered in blog post series I&rsquo;ve mentioed above and because due to licensing regulation I cannot past this code here in the blog.</p>

<h3>3. Instantiate EC2 on Amazon.</h3>

<p>Just pick instance which suites your goals and run them. I&rsquo;ve used micro instance with Ubuntu 12.04 LTE as OS.</p>

<h3>4. Update packages.</h3>

<p>SSH into your newly created instances and run form terminal an update:</p>

<figure class='code'><figcaption><span>Terminal Window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update && sudo apt-get upgrade -y</span></code></pre></td></tr></table></div></figure>


<p>Once update install several dependencies we will use later.</p>

<figure class='code'><figcaption><span>Terminal Window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install g++ libxmu6 libxt6 -y</span></code></pre></td></tr></table></div></figure>


<h3>5. Download MCR.</h3>

<p>Download MCR from Matlab site <a href="http://www.mathworks.com/products/compiler/mcr/">here</a>. Once download is finished upload it on your EC2 instances.</p>

<h3>6.Install MCR at EC2.</h3>

<p>On each instance run in terminal:</p>

<figure class='code'><figcaption><span>Terminal Window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd MCR_R2013a_glnxa64_installer/
</span><span class='line'>./install -console -mode silent  -agreeToLicense yes</span></code></pre></td></tr></table></div></figure>


<h3>7. Compile your Matlab application.</h3>

<figure class='code'><figcaption><span>Matlab </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="nv">mcc</span> <span class="o">-</span><span class="nv">m</span> <span class="nv">NameOfYourApplication</span>
</span></code></pre></td></tr></table></div></figure>


<h3>8. Upload compiled on EC2 instances.</h3>

<p>After compilation has finished you need to upload compiled code onto the cloud instances. You need to upload files:
* NameOfYourApplication
* run_NameOfYourApplication.sh</p>

<h3>9. Run your app.</h3>

<figure class='code'><figcaption><span>Terminal Window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./run_NameOfYourApplication.sh /usr/local/MATLAB/MATLAB_Compiler_Runtime/v81/</span></code></pre></td></tr></table></div></figure>


<h3>10.Enjoy!</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Putting All Together Setup Hadoop Cluster On Vm With Puppet]]></title>
    <link href="http://pensieve.info/blog/2013/10/07/putting-all-together-setup-hadoop-cluster-on-vm-with-puppet/"/>
    <updated>2013-10-07T00:00:00+03:00</updated>
    <id>http://pensieve.info/blog/2013/10/07/putting-all-together-setup-hadoop-cluster-on-vm-with-puppet</id>
    <content type="html"><![CDATA[<p>`&mdash;&ndash;
layout: post
title: &ldquo;Putting all together setup, Hadoop cluster on VM with Puppet.&rdquo;
date: 2013-09-30 00:14
comments: true</p>

<h2>categories: hadoop cluster puppet scripts automation virtualization</h2>

<p>In my two previous blog post I&rsquo;ve explained:</p>

<ol>
<li><a href="blog/2013/09/21/setup-hadoop-cluster/">Setup Hadoop cluster</a> &ndash; manual configuration on virtual machines which needed to setup Hadoop cluster.</li>
<li><a href="blog/2013/09/21/install-java-on-vm-using-vagrant-and-puppet">Install Java on VM using vagrant and puppet</a> &ndash; I&rsquo;ve started to explain how to leverage vagrant and puppet in order to have Java installed in virtual machine.</li>
</ol>


<p>Now in this post I&rsquo;ll try to explain how-to setup hadoop cluster on virtual environment using vagrant and puppet scripts, so all actions in my first post could be easily automated.</p>

<p> <!-- more --></p>

<p> I&rsquo;m going to use my first two posts as a reference and assume you have downloaded all files needed, moreover you already have puppet module script for java install and configuration.</p>

<p>Start as usual:</p>

<h3>1. Create module folders:</h3>

<figure class='code'><figcaption><span>Terminal Widow </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p modules/hadoop/{files,manifests,templates}</span></code></pre></td></tr></table></div></figure>


<h3>2. Copy hadoop files into module folder:</h3>

<p>As I said I&rsquo;m going to use files from previous <a href="blog/2013/09/21/setup-hadoop-cluster/">post</a></p>

<figure class='code'><figcaption><span>Terminal Window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp hadoop-1.2.1.tar.gz modules/hadoop/files/</span></code></pre></td></tr></table></div></figure>


<h3>3. Write implementation of hadoop module for puppet.</h3>

<p>Following script will download, unpack and setup hadoop on desired amount of virtual machines.</p>

<figure class='code'><figcaption><span>init.pp </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="n">hadoop</span><span class="p">(</span> <span class="vg">$masterNode</span><span class="p">,</span> <span class="vg">$slaveNodes</span><span class="p">,</span> <span class="vg">$distrFile</span><span class="p">,</span> <span class="vg">$hadoopHome</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Exec</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">path</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="s2">&quot;/usr/bin&quot;</span><span class="p">,</span> <span class="s2">&quot;/bin&quot;</span><span class="p">,</span> <span class="s2">&quot;/usr/sbin&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">file</span> <span class="p">{</span> <span class="s2">&quot;/tmp/${distrFile}.tar.gz&quot;</span> <span class="p">:</span>
</span><span class='line'>        <span class="n">source</span> <span class="o">=&gt;</span> <span class="s2">&quot;puppet:///modules/hadoop/${distrFile}.tar.gz&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">owner</span> <span class="o">=&gt;</span>  <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>        <span class="n">mode</span>  <span class="o">=&gt;</span> <span class="mi">755</span><span class="p">,</span>
</span><span class='line'>        <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">present</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">exec</span> <span class="p">{</span> <span class="s2">&quot;extract distr&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cwd</span> <span class="o">=&gt;</span> <span class="s2">&quot;/tmp&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&quot;tar xf ${distrFile}.tar.gz&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">creates</span> <span class="o">=&gt;</span> <span class="s2">&quot;${hadoopHome}&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">user</span> <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>        <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">File</span><span class="o">[</span><span class="s2">&quot;/tmp/${distrFile}.tar.gz&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">exec</span> <span class="p">{</span> <span class="s2">&quot;move distr&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cwd</span> <span class="o">=&gt;</span> <span class="s2">&quot;/tmp&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&quot;mv ${distrFile} ${hadoopHome}&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">creates</span> <span class="o">=&gt;</span> <span class="s2">&quot;${hadoopHome}&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">user</span> <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>        <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s2">&quot;extract distr&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">file</span> <span class="p">{</span> <span class="s2">&quot;/etc/profile.d/hadoop.sh&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">content</span> <span class="o">=&gt;</span> <span class="s2">&quot;export HADOOP_PREFIX=</span><span class="se">\&quot;</span><span class="s2">${hadoopHome}</span><span class="se">\&quot;</span><span class="s2"></span>
</span><span class='line'><span class="s2">        export PATH=</span><span class="se">\&quot;</span><span class="s2">\$PATH:\$HADOOP_PREFIX/bin</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">file</span> <span class="p">{</span> <span class="s2">&quot;${hadoopHome}/conf/slaves&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">content</span> <span class="o">=&gt;</span> <span class="n">template</span><span class="p">(</span> <span class="s2">&quot;hadoop/slaves.erb&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mode</span> <span class="o">=&gt;</span> <span class="mi">644</span><span class="p">,</span>
</span><span class='line'>        <span class="n">owner</span> <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>        <span class="n">group</span> <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>        <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span> <span class="s2">&quot;move distr&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">file</span> <span class="p">{</span> <span class="s2">&quot;${hadoopHome}/conf/masters&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">content</span> <span class="o">=&gt;</span> <span class="n">template</span><span class="p">(</span> <span class="s2">&quot;hadoop/masters.erb&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mode</span> <span class="o">=&gt;</span> <span class="mi">644</span><span class="p">,</span>
</span><span class='line'>        <span class="n">owner</span> <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>        <span class="n">group</span> <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>        <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span> <span class="s2">&quot;move distr&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">file</span> <span class="p">{</span> <span class="s2">&quot;${hadoopHome}/conf/core-site.xml&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">content</span> <span class="o">=&gt;</span> <span class="n">template</span><span class="p">(</span> <span class="s2">&quot;hadoop/core-site.erb&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mode</span> <span class="o">=&gt;</span> <span class="mi">644</span><span class="p">,</span>
</span><span class='line'>        <span class="n">owner</span> <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>        <span class="n">group</span> <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>        <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span> <span class="s2">&quot;move distr&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">file</span> <span class="p">{</span> <span class="s2">&quot;${hadoopHome}/conf/hdfs-site.xml&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">content</span> <span class="o">=&gt;</span> <span class="n">template</span><span class="p">(</span> <span class="s2">&quot;hadoop/hdfs-site.erb&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mode</span> <span class="o">=&gt;</span> <span class="mi">644</span><span class="p">,</span>
</span><span class='line'>        <span class="n">owner</span> <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>        <span class="n">group</span> <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>        <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span> <span class="s2">&quot;move distr&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">file</span> <span class="p">{</span> <span class="s2">&quot;${hadoopHome}/conf/mapred-site.xml&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">content</span> <span class="o">=&gt;</span> <span class="n">template</span><span class="p">(</span> <span class="s2">&quot;hadoop/mapred-site.erb&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">mode</span> <span class="o">=&gt;</span> <span class="mi">644</span><span class="p">,</span>
</span><span class='line'>        <span class="n">owner</span> <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>        <span class="n">group</span> <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>        <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span> <span class="s2">&quot;move distr&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. Write puppet templates for configuration files:</h3>

<p>You probably paid attention that in order to setup hadoop configuration files I&rsquo;ve used puppet templates function (you can read more <a href="http://docs.puppetlabs.com/guides/templating.html">here</a>). Therefore now we need to provide three configuration files in order to complete that part.</p>

<figure class='code'><figcaption><span>masters </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% @masterNode </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>slaves </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% @slaveNodes.each </span><span class="k">do</span> <span class="o">|</span><span class="n">node</span><span class="o">|</span> <span class="o">-</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;% node %&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">-%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>core-site.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span>
</span><span class='line'>    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property&gt;</span>
</span><span class='line'>            <span class="nt">&lt;name&gt;</span>fs.default.name<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>            <span class="nt">&lt;value&gt;</span><span class="err">&lt;</span>%= @masterNode %&gt;:9000<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>            <span class="nt">&lt;description&gt;</span>The name of the default file system. A URI whose scheme and authority determine the FileSystem implementation.<span class="nt">&lt;/description&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>hdfs-site.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>dfs.replication<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>1<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>        <span class="nt">&lt;description&gt;</span>The actual number of replications can be specified when the file is created.<span class="nt">&lt;/description&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>mapred-site.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="p">?</span><span class="n">xml</span> <span class="n">version</span><span class="o">=</span><span class="s2">&quot;1.0&quot;</span><span class="sc">?&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="p">?</span><span class="n">xml</span><span class="o">-</span><span class="n">stylesheet</span> <span class="n">type</span><span class="o">=</span><span class="s2">&quot;text/xsl&quot;</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;configuration.xsl&quot;</span><span class="sc">?&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">configuration</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">property</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nb">name</span><span class="o">&gt;</span><span class="n">mapred</span><span class="o">.</span><span class="n">job</span><span class="o">.</span><span class="n">tracker</span><span class="o">&lt;</span><span class="sr">/name&gt;</span>
</span><span class='line'><span class="sr">        &lt;value&gt;&lt;% @masterNode %&gt;:9001&lt;/</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">description</span><span class="o">&gt;</span><span class="no">The</span> <span class="n">host</span> <span class="ow">and</span> <span class="n">port</span> <span class="n">that</span> <span class="n">the</span> <span class="no">MapReduce</span> <span class="n">job</span> <span class="n">tracker</span> <span class="n">runs</span> <span class="n">at</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/description&gt;</span>
</span><span class='line'><span class="sr">    &lt;/</span><span class="n">property</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where:</p>

<ul>
<li><strong>$masterNode</strong> &ndash; IP address of hadoop master node.</li>
<li><strong>$slaveNodes</strong>  &ndash;  list of IP addresses for hadoop slave nodes.</li>
<li><strong>$distrFile</strong> &ndash; hadoop distribution file name.</li>
<li><strong>$hadoopHome</strong> &ndash; desired hadoop home folder.</li>
</ul>


<h3>5. Next step is to write Vagrant file.</h3>

<figure class='code'><figcaption><span>Vagrant </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Vagrant</span><span class="p">:</span><span class="ss">:Config</span><span class="o">.</span><span class="n">run</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="ss">:hadoop_master</span> <span class="k">do</span> <span class="o">|</span><span class="n">hadoop_config</span><span class="o">|</span>
</span><span class='line'>        <span class="n">hadoop_config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;ubuntu&quot;</span>
</span><span class='line'>        <span class="n">hadoop_config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:hostonly</span><span class="p">,</span> <span class="s2">&quot;192.168.32.1&quot;</span>
</span><span class='line'>        <span class="n">hadoop_config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">host_name</span> <span class="o">=</span> <span class="s2">&quot;master&quot;</span>
</span><span class='line'>        <span class="n">hadoop_config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">customize</span> <span class="o">[</span> <span class="s2">&quot;modifyvm&quot;</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="s2">&quot;--memory&quot;</span><span class="p">,</span> <span class="s2">&quot;1024&quot;</span><span class="o">]</span>
</span><span class='line'>        <span class="n">hadoop_config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:puppet</span><span class="p">,</span> <span class="ss">:facter</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s2">&quot;fqdn&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;master&quot;</span><span class="p">}</span> <span class="k">do</span> <span class="o">|</span><span class="n">puppet</span><span class="o">|</span>
</span><span class='line'>                <span class="n">puppet</span><span class="o">.</span><span class="n">module_path</span> <span class="o">=</span> <span class="s2">&quot;modules&quot;</span>
</span><span class='line'>                <span class="n">puppet</span><span class="o">.</span><span class="n">manifests_path</span> <span class="o">=</span> <span class="s2">&quot;manifests&quot;</span>
</span><span class='line'>                <span class="n">puppet</span><span class="o">.</span><span class="n">manifest_file</span>  <span class="o">=</span> <span class="s2">&quot;hadoop.pp&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="ss">:hadoop_slave</span> <span class="k">do</span> <span class="o">|</span><span class="n">hadoop_config</span><span class="o">|</span>
</span><span class='line'>        <span class="n">hadoop_config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;ubuntu&quot;</span>
</span><span class='line'>        <span class="n">hadoop_config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:hostonly</span><span class="p">,</span> <span class="s2">&quot;192.168.32.2&quot;</span>
</span><span class='line'>        <span class="n">hadoop_config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">host_name</span> <span class="o">=</span> <span class="s2">&quot;slave&quot;</span>
</span><span class='line'>        <span class="n">hadoop_config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">customize</span> <span class="o">[</span> <span class="s2">&quot;modifyvm&quot;</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="s2">&quot;--memory&quot;</span><span class="p">,</span> <span class="s2">&quot;1024&quot;</span><span class="o">]</span>
</span><span class='line'>        <span class="n">hadoop_config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:puppet</span><span class="p">,</span> <span class="ss">:facter</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s2">&quot;fqdn&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;slave&quot;</span><span class="p">}</span> <span class="k">do</span> <span class="o">|</span><span class="n">puppet</span><span class="o">|</span>
</span><span class='line'>                <span class="n">puppet</span><span class="o">.</span><span class="n">module_path</span> <span class="o">=</span> <span class="s2">&quot;modules&quot;</span>
</span><span class='line'>                <span class="n">puppet</span><span class="o">.</span><span class="n">manifests_path</span> <span class="o">=</span> <span class="s2">&quot;manifests&quot;</span>
</span><span class='line'>                <span class="n">puppet</span><span class="o">.</span><span class="n">manifest_file</span>  <span class="o">=</span> <span class="s2">&quot;hadoop.pp&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>6. Now we need to write some code to combine java installation process with hadoop setup.</h3>

<p>Following script will initialize java defaults and hadoop installation.</p>

<figure class='code'><figcaption><span>hadoop.pp </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="p">{</span> <span class="s2">&quot;hadoop&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">masterNode</span> <span class="o">=&gt;</span> <span class="s2">&quot;192.168.32.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">slaveNodes</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;192.168.32.1&quot;</span><span class="p">,</span> <span class="s2">&quot;192.168.32.2&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="n">distrFile</span>  <span class="o">=&gt;</span> <span class="s2">&quot;hadoop-1.2.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">hadoopHome</span> <span class="o">=&gt;</span> <span class="s2">&quot;/home/vagrant/hadoop&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kp">include</span> <span class="n">java</span>
</span></code></pre></td></tr></table></div></figure>


<h3>7. Run virtual machines.</h3>

<figure class='code'><figcaption><span>Terminal Window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant up hadoop_{master,slave}</span></code></pre></td></tr></table></div></figure>


<p>Now if we proceed to the last step in <a href="blog/2013/09/21/setup-hadoop-cluster/">hadoop</a> post and will try to run command on master node:</p>

<figure class='code'><figcaption><span>Terminal Window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo ./hadoop namenode -format
</span><span class='line'>sudo ./start-all.sh</span></code></pre></td></tr></table></div></figure>


<p>We will notice that we have forgot to configure and publish ssh keys between nodes, hence cluster is not able to properly startup. Therefore we need to continue a bit more.</p>

<h3>8. Setup ssh keys.</h3>

<p>Run in terminal:</p>

<figure class='code'><figcaption><span>Terminal Window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-keygen -t rsa</span></code></pre></td></tr></table></div></figure>


<p>and provide key path up to your files module folder (&ldquo;modules/hadoop/files/id_rsa&rdquo; for example). Enter your passphrase, now open new generated id_rsa.pub and copy into clipboard newly generated public key.
Now we need to add following lines into our module init.pp file:</p>

<figure class='code'><figcaption><span>init.pp </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="n">file</span> <span class="p">{</span> <span class="s2">&quot;/home/vagrant/.ssh/id_rsa&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">source</span> <span class="o">=&gt;</span> <span class="s2">&quot;puppet:///modules/hadoop/id_rsa&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">mode</span> <span class="o">=&gt;</span> <span class="mi">600</span><span class="p">,</span>
</span><span class='line'>        <span class="n">owner</span> <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>        <span class="n">group</span> <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">file</span> <span class="p">{</span> <span class="s2">&quot;/home/vagrant/.ssh/id_rsa.pub&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">source</span> <span class="o">=&gt;</span> <span class="s2">&quot;puppet:///modules/hadoop/id_rsa.pub&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">mode</span> <span class="o">=&gt;</span> <span class="mi">600</span><span class="p">,</span>
</span><span class='line'>        <span class="n">owner</span> <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>        <span class="n">group</span> <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ssh_authorized_key</span> <span class="p">{</span> <span class="s2">&quot;ssh_key&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="s2">&quot;present&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">key</span> <span class="o">=&gt;</span> <span class="s2">&quot;past here content from your clipboard (public key value from id_rsa.pub file)&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">type</span> <span class="o">=&gt;</span> <span class="s2">&quot;ssh-rsa&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">user</span> <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>        <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">File</span><span class="o">[</span><span class="s2">&quot;/home/vagrant/.ssh/id_rsa.pub&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>9. Enjoy.</h3>

<p>Now you can reload virtual machines</p>

<figure class='code'><figcaption><span>Terminal Window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant reload hadoop_{master,slave}</span></code></pre></td></tr></table></div></figure>


<p>then loggin into master node</p>

<figure class='code'><figcaption><span>Terminal Window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant ssh hadoop_master</span></code></pre></td></tr></table></div></figure>


<p>and finally start cluster</p>

<figure class='code'><figcaption><span>Terminal Window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo ./hadoop namenode -format
</span><span class='line'>sudo ./start-all.sh</span></code></pre></td></tr></table></div></figure>


<p>You can find sources on my <a href="https://github.com/C0rWin/hadoop-puppet">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Israel Global Day of Code Retreat 2013.]]></title>
    <link href="http://pensieve.info/blog/2013/09/30/israel-global-day-of-code-retreat/"/>
    <updated>2013-09-30T00:28:00+03:00</updated>
    <id>http://pensieve.info/blog/2013/09/30/israel-global-day-of-code-retreat</id>
    <content type="html"><![CDATA[<p>During day-to-day, developers facing with deadlines, different project commitments, bug fixing, maitenance and support. There is always not enough time for code improvements and refactoring. I wish I&rsquo;ll have some free day I could easily practice and improve my development skills without having all this duties on head.</p>

<p>So here it comes again:</p>

<blockquote><p>On 14th of December there will be <a href="http://coderetreat.org/">Global Day of Code Retreat</a> event, which this year is hosted by <a href="http://coderetreat.org/events/event/listByLocation?location=eBay+Israel+Innovation+Center%27s+Offices">Ebay Israel Innovation Center</a>. You can find more on <a href="http://coderetreat.org/about">about</a> page and take a look on following video:</p></blockquote>

<p> <div class="embed-video-container"><iframe src="http://player.vimeo.com/video/18955165 "></iframe></div></p>

<p><strong>Do not miss, highly recommended.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Maven on VM with Puppet]]></title>
    <link href="http://pensieve.info/blog/2013/09/22/install-maven-on-vm-with-puppet/"/>
    <updated>2013-09-22T23:26:00+03:00</updated>
    <id>http://pensieve.info/blog/2013/09/22/install-maven-on-vm-with-puppet</id>
    <content type="html"><![CDATA[<p>In my <a href="http://pensieve.info/blog/2013/09/21/install-java-on-vm-using-vagrant-and-puppet">previous</a> post I&rsquo;ve explained how to setup Java on virtual machine using <a href="http://puppetlabs.com/">Puppet</a>. Now it&rsquo;s a time to make it for maven, basically most of the steps are the same.</p>

<!-- more -->


<h3>1. Download maven archive.</h3>

<p>Visit Apache <a href="http://maven.apache.org/download.cgi">Maven site</a> and download recent binary tar gz archived maven version.</p>

<h3>2. Create maven puppet module folders.</h3>

<p>Execute following terminal command in your working directory:</p>

<figure class='code'><figcaption><span>Terminal Window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p modules/maven/{files,manifests}</span></code></pre></td></tr></table></div></figure>


<p>And copy downloaded maven binaries archive (apache-maven-3.1.0-bin.tar.gz in my case) into files sub-folder:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp apache-maven-3.1.0-bin.tar.gz modules/maven/files/</span></code></pre></td></tr></table></div></figure>


<h3>3. Write down configuration script.</h3>

<p>Create <em>init.pp</em> files inside manifests folder</p>

<figure class='code'><figcaption><span>Terminal Window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch modules/maven/manifests/init.pp</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s put there following implementation:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="n">maven</span> <span class="p">(</span>
</span><span class='line'>  <span class="vg">$maven_home</span> <span class="o">=</span> <span class="s2">&quot;/usr/lib/maven&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="vg">$maven_archive</span> <span class="o">=</span> <span class="s2">&quot;apache-maven-3.1.0-bin.tar.gz&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="vg">$maven_folder</span> <span class="o">=</span> <span class="s2">&quot;apache-maven-3.1.0&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="no">Exec</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">path</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="s2">&quot;/usr/bin&quot;</span><span class="p">,</span> <span class="s2">&quot;/bin&quot;</span><span class="p">,</span> <span class="s2">&quot;/usr/sbin&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">file</span> <span class="p">{</span> <span class="s2">&quot;/tmp/${maven_archive}&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">present</span><span class="p">,</span>
</span><span class='line'>      <span class="n">source</span> <span class="o">=&gt;</span> <span class="s2">&quot;puppet:///modules/maven/${maven_archive}&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">owner</span> <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>      <span class="n">mode</span> <span class="o">=&gt;</span> <span class="mi">755</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nb">exec</span> <span class="p">{</span> <span class="s2">&quot;extract maven&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&quot;tar xfv ${maven_archive}&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">cwd</span> <span class="o">=&gt;</span> <span class="s2">&quot;/tmp&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">creates</span> <span class="o">=&gt;</span> <span class="s2">&quot;${maven_home}&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">File</span><span class="o">[</span><span class="s2">&quot;/tmp/${maven_archive}&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">exec</span> <span class="p">{</span> <span class="s2">&quot;move maven&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&quot;mv ${maven\_folder} ${maven_home}&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">creates</span> <span class="o">=&gt;</span> <span class="s2">&quot;${maven_home}&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">cwd</span> <span class="o">=&gt;</span> <span class="s2">&quot;/tmp&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s2">&quot;extract maven&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">file</span> <span class="p">{</span> <span class="s2">&quot;/etc/profile.d/maven.sh&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="n">content</span> <span class="o">=&gt;</span>   <span class="s2">&quot;export MAVEN_HOME=${maven_home}</span>
</span><span class='line'><span class="s2">                   export M2=\$MAVEN_HOME/bin</span>
</span><span class='line'><span class="s2">                   export PATH=\$PATH:\$M2</span>
</span><span class='line'><span class="s2">                   export MAVEN_OPTS=</span><span class="se">\&quot;</span><span class="s2">-Xmx512m -Xms512m</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. Put everything together.</h3>

<p>I&rsquo;ll continue to use Vagrantfile and manifest from <a href="http://pensieve.info/blog/2013/09/21/install-java-on-vm-using-vagrant-and-puppet">previous</a> post, therefore in order to test my new puppet script for maven install I&rsquo;ll just use already create test_vm.pp and add following lines:</p>

<figure class='code'><figcaption><span>Terminal WIndow </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "include maven" >> manifests/test_vm.pp</span></code></pre></td></tr></table></div></figure>


<h3>5. Reload VM (or start).</h3>

<figure class='code'><figcaption><span>Terminal Window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant reload test_vm</span></code></pre></td></tr></table></div></figure>


<h3>6. Enjoy!</h3>

<p> In my next post I&rsquo;ll finilize and put together current result with script from my <a href="http://pensieve.info/blog/2013/09/21/install-java-on-vm-using-vagrant-and-puppet">previous</a> post in order to implement scripts which will enable to setup Hadoop cluster on VM. Therefore all I&rsquo;ve described in my <a href="http://pensieve.info/blog/2013/09/21/setup-hadoop-cluster/">first</a> post could be easily automated.</p>

<p>PS. Here I&rsquo;ve changed the puppet script same way as in my <a href="http://pensieve.info/blog/2013/09/21/install-java-on-vm-using-vagrant-and-puppet">previous</a> post, to support parametrized class definition to support customization.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Java on VM using Vagrant and Puppet]]></title>
    <link href="http://pensieve.info/blog/2013/09/21/install-java-on-vm-using-vagrant-and-puppet/"/>
    <updated>2013-09-21T23:25:00+03:00</updated>
    <id>http://pensieve.info/blog/2013/09/21/install-java-on-vm-using-vagrant-and-puppet</id>
    <content type="html"><![CDATA[<p>As part of my work I need to be able to test different Java Web applications. I need to be able to run some tests on more then only single computer, hence I need rapid way of setting up several Linux based computers/servers with configured Java running, usually I&rsquo;m using Ubuntu based destributives.</p>

<p>Therefore I&rsquo;ve choose the winning couple of <a href="http://puppetlabs.com/">Puppet</a> and <a href="http://www.vagrantup.com/">Vagrant</a>. You&rsquo;re more than welcome to read about these tools and I&rsquo;ll skip the installation guide for them, since google has pleanty of different tutorials explaning how to do it for different platform, so you just need to pick the right one for you.</p>

<!-- more -->


<p>I&rsquo;m going to show how to leverage <a href="http://puppetlabs.com/">Puppet</a> modules architecture, how to implement new module which will be capable to install and configure Java for new VM machine. To learn more about modules in <a href="http://puppetlabs.com/">Puppet</a>, please take a look on <a href="http://docs.puppetlabs.com/puppet/2.7/reference/modules_fundamentals.html">modules fundamentals</a> article on <a href="http://puppetlabs.com/">Puppet</a> labs site.</p>

<h3>1. Download Java.</h3>

<p>Very first step which has to be done, is to download tar gz archive of Java JDK or (JRE), from Oracle official <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html">site</a>. By the time I&rsquo;m writting this post current lates JDK tar gz is <em>jdk-7u40-linux-i586.tar.gz</em>.</p>

<h3>2. Create new Puppet module.</h3>

<figure class='code'><figcaption><span>Terminal Window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p modules/java/{files,manifests}</span></code></pre></td></tr></table></div></figure>


<h3>3. Copy Java JDK into module folders.</h3>

<figure class='code'><figcaption><span>Terminal Window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp jdk-7u40-linux-i586.tar.gz modules/java/files/</span></code></pre></td></tr></table></div></figure>


<h3>4. Write module implementation.</h3>

<ul>
<li>Create <em>init.pp</em> file within <strong>manifests</strong> folder</li>
</ul>


<figure class='code'><figcaption><span>Terminal WIndow </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch modules/java/manifests/init.pp</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Now we need to write down following content:</li>
</ul>


<figure class='code'><figcaption><span>init.pp  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="n">java</span><span class="p">(</span>
</span><span class='line'>    <span class="vg">$java_archive</span> <span class="o">=</span> <span class="s2">&quot;jdk-7u40-linux-x64.tar.gz&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="vg">$java_home</span> <span class="o">=</span> <span class="s2">&quot;/usr/lib/jvm/jdk1.7.0_40/&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="vg">$java_folder</span> <span class="o">=</span> <span class="s2">&quot;jdk1.7.0_40&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Exec</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">path</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="s2">&quot;/usr/bin&quot;</span><span class="p">,</span> <span class="s2">&quot;/bin&quot;</span><span class="p">,</span> <span class="s2">&quot;/usr/sbin&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">file</span> <span class="p">{</span> <span class="s2">&quot;/tmp/${java_archive}&quot;</span> <span class="p">:</span>
</span><span class='line'>        <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="s2">&quot;present&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">source</span> <span class="o">=&gt;</span> <span class="s2">&quot;puppet:///modules/java/${java_archive}&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">owner</span>  <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>        <span class="n">mode</span>   <span class="o">=&gt;</span> <span class="mi">755</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">exec</span> <span class="p">{</span> <span class="s1">&#39;extract jdk&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cwd</span> <span class="o">=&gt;</span> <span class="s1">&#39;/tmp&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&quot;tar xfv ${java_archive}&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">creates</span> <span class="o">=&gt;</span> <span class="vg">$java_home</span><span class="p">,</span>
</span><span class='line'>        <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">File</span><span class="o">[</span><span class="s2">&quot;/tmp/${java_archive}&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">file</span> <span class="p">{</span> <span class="s1">&#39;/usr/lib/jvm&#39;</span> <span class="p">:</span>
</span><span class='line'>        <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">directory</span><span class="p">,</span>
</span><span class='line'>        <span class="n">owner</span> <span class="o">=&gt;</span> <span class="n">vagrant</span><span class="p">,</span>
</span><span class='line'>        <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s1">&#39;extract jdk&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">exec</span> <span class="p">{</span> <span class="s1">&#39;move jdk&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cwd</span> <span class="o">=&gt;</span> <span class="s1">&#39;/tmp&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">creates</span> <span class="o">=&gt;</span> <span class="vg">$java_home</span><span class="p">,</span>
</span><span class='line'>        <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">File</span><span class="o">[</span><span class="s1">&#39;/usr/lib/jvm&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&quot;mv ${java_folder} /usr/lib/jvm/&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">exec</span> <span class="p">{</span><span class="s1">&#39;install java&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s1">&#39;move jdk&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="n">logoutput</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>        <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&quot;update-alternatives --install /bin/java java ${java_home}/bin/java 1&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">exec</span> <span class="p">{</span><span class="s1">&#39;set java&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s1">&#39;install java&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="n">logoutput</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>        <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&quot;update-alternatives --set java ${java_home}/bin/java&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">exec</span> <span class="p">{</span><span class="s1">&#39;install javac&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s1">&#39;move jdk&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="n">logoutput</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>        <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&quot;update-alternatives --install /bin/javac javac ${java_home}/bin/javac 1&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">exec</span> <span class="p">{</span><span class="s1">&#39;set javac&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s1">&#39;install javac&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="n">logoutput</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>        <span class="n">command</span> <span class="o">=&gt;</span> <span class="s2">&quot;update-alternatives --set javac ${java_home}/bin/javac&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">file</span> <span class="p">{</span> <span class="s2">&quot;/etc/profile.d/java.sh&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="n">content</span> <span class="o">=&gt;</span> <span class="s2">&quot;export JAVA_HOME=${java_home}</span>
</span><span class='line'><span class="s2">                  export PATH=\$PATH:\$JAVA_HOME/bin&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5. Run and test new module.</h3>

<ul>
<li>Run:</li>
</ul>


<figure class='code'><figcaption><span>Terminal Window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant init</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Edit Vagrantfile, put following content:</li>
</ul>


<figure class='code'><figcaption><span>Vagrantfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Vagrant</span><span class="p">:</span><span class="ss">:Config</span><span class="o">.</span><span class="n">run</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="ss">:test_vm</span> <span class="k">do</span> <span class="o">|</span><span class="n">test_vm</span><span class="o">|</span>
</span><span class='line'>        <span class="n">test_vm</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;ubuntu&quot;</span>
</span><span class='line'>        <span class="n">test_vm</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:hostonly</span><span class="p">,</span> <span class="s2">&quot;10.71.71.10&quot;</span>
</span><span class='line'>        <span class="n">test_vm</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">customize</span> <span class="o">[</span> <span class="s2">&quot;modifyvm&quot;</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="s2">&quot;--memory&quot;</span><span class="p">,</span> <span class="s2">&quot;1024&quot;</span><span class="o">]</span>
</span><span class='line'>        <span class="n">test_vm</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:puppet</span> <span class="k">do</span> <span class="o">|</span><span class="n">puppet</span><span class="o">|</span>
</span><span class='line'>                <span class="n">puppet</span><span class="o">.</span><span class="n">module_path</span> <span class="o">=</span> <span class="s2">&quot;~/vagrant/manifests/&quot;</span>
</span><span class='line'>                <span class="n">puppet</span><span class="o">.</span><span class="n">module_path</span> <span class="o">=</span> <span class="s2">&quot;modules&quot;</span>
</span><span class='line'>                <span class="n">puppet</span><span class="o">.</span><span class="n">manifests_path</span> <span class="o">=</span> <span class="s2">&quot;manifests&quot;</span>
</span><span class='line'>                <span class="n">puppet</span><span class="o">.</span><span class="n">manifest_file</span>  <span class="o">=</span> <span class="s2">&quot;test_vm.pp&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create <em>manifests</em> folder and <em>test_vm.pp</em>:</li>
</ul>


<figure class='code'><figcaption><span>Terminal Window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir manifests && touch manifests/test_vm.pp
</span><span class='line'>echo "include java" >> manifests/test_vm.pp</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Run VM</li>
</ul>


<figure class='code'><figcaption><span>Terminal Window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant up test_vm</span></code></pre></td></tr></table></div></figure>


<h3>6. Enjoy!</h3>

<p>PS. Thanks to my friend which pointed me to more nice and clear way of declaring variable in a class in a way it could be customized later with values different from defaults. I&rsquo;ve update the post and here you can see the customization example:</p>

<figure class='code'><figcaption><span>test_vm.pp</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="p">{</span> <span class="s2">&quot;java&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">java_archive</span> <span class="o">=&gt;</span> <span class="s2">&quot;jdk-8u01-linux-x64.tar.gz&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">java_home</span> <span class="o">=&gt;</span> <span class="s2">&quot;/usr/lib/jvm/jdk1.8.0_01/&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">java_folder</span> <span class="o">=&gt;</span> <span class="s2">&quot;jdk1.8.0_01&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup hadoop cluster]]></title>
    <link href="http://pensieve.info/blog/2013/09/21/setup-hadoop-cluster/"/>
    <updated>2013-09-21T01:10:00+03:00</updated>
    <id>http://pensieve.info/blog/2013/09/21/setup-hadoop-cluster</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve required to execute some heavy clustering computation on relatively big dataset. Since <a href="http://mahout.apache.org/">Mahout</a> (scalable machine learning framework) already has all required capabilities and holds implementation of base clustering algorithm, I&rsquo;ve decided to use it as a start point and because <a href="http://mahout.apache.org/">Mahout</a> is <a href="http://hadoop.apache.org/">Hadoop</a> based I&rsquo;ve had to setup cluster of <a href="http://hadoop.apache.org/">Hadoop</a> nodes to be able to execute my clustering task.</p>

<p>So here I&rsquo;ll try to memorize steps which required for distributed setup of hadoop cluster, for sake of simplicity I&rsquo;ll describe setup for only two nodes: master and slave. In this blog post I am going to describe manual install and configuration, while in the next I&rsquo;ll describe the automation configuration and install using <a href="http://puppetlabs.com/">puppet</a> and <a href="http://www.vagrantup.com/">vagrant</a> tools.  I will describe the installation process in context of Ubuntu 12.10 server, while I belive same steps will work for other distirbutives as well.</p>

<!-- more -->


<p>Here is the steps required for Hadoop install and configuration in order to be able to execute distributed tasks on cluster nodes:</p>

<ol>
<li><a href="#java_download_install">Java download and installation</a>.</li>
<li><a href="#hadoop_install">Download Hadoop and setup</a>.</li>
<li><a href="#ssh">Setup ssh configuration and configure public keys</a>.</li>
<li><a href="#hadoop_startup">Hadoop startup</a>.</li>
</ol>


<h3><a id="java_download_install">Java download and installation.</a></h3>

<p>Bellow steps has to be performed for each node in cluster in order to make sure each one has recent Oracle Java JDK installed.</p>

<ul>
<li>Download recent Java JDK for Linux distribution from Oracle official <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">site</a>. By the time writing this post recent tar gz was <em>jdk-7u40-linux-i586.tar.gz</em>.</li>
<li>Extract files from archive, run following command in terminal:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar xfv jdk-7u40-linux-i586.tar.gz</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Move extracted folder:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mv jdk1.7.0_40 /usr/lib/jvm/jdk1.7.0_40</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Update alternatives, install setup aliases for new Java jdk:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo update-alternatives --install /bin/java java /usr/lib/jvm/jdk1.7.0_40/bin/java 1
</span><span class='line'>sudo update-alternatives --install /bin/javac javac /usr/lib/jvm/jdk1.7.0_40/bin/javac 1</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Make installed aliases active:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo update-alternatives --set java /usr/lib/jvm/jdk1.7.0_40/bin/java
</span><span class='line'>sudo update-alternatives --set javac /usr/lib/jvm/jdk1.7.0_40/bin/javac</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Configure <strong>$JAVA_HOME</strong>:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo touch /etc/profile.d/java.sh
</span><span class='line'>sudo -c 'echo "export JAVA_HOME=/usr/lib/jvm/jdk1.7.0_40/" >> /etc/profile.d/java.sh'
</span><span class='line'>sudo -c 'echo "export PATH=$PATH:$JAVA_HOME/bin" >> /etc/profile.d/java.sh'</span></code></pre></td></tr></table></div></figure>


<h3><a id="hadoop_install">Download Hadoop distribution</a></h3>

<ul>
<li>Download Hadoop from releases <a href="http://apache.spd.co.il/hadoop/common/">site</a>, choose last stable version.</li>
<li>Extract downloaded files into home folder:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar xfv hadoop-1.2.1.tar.gz</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Configure <strong>$HADOOP_HOME</strong>:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo touch /etc/profile.d/hadoop.sh
</span><span class='line'>sudo -c 'echo "export HADOOP_HOME=~/hadoop-1.2.0/" >> /etc/profile.d/hadoop.sh'
</span><span class='line'>sudo -c 'echo "export PATH=$PATH:$HADOOP_HOME/bin" >> /etc/profile.d/hadoop.sh'</span></code></pre></td></tr></table></div></figure>


<p>Now for next few steps assume we have two computer with IP addresses as follow: <strong>192.168.17.1</strong> (master) and <strong>192.168.17.2</strong> (slave).</p>

<ul>
<li>Open file $HADOOP_HOME/conf/core-site.xml and write content:</li>
</ul>


<figure class='code'><figcaption><span>core-site.xml</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span>
</span><span class='line'>    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property&gt;</span>
</span><span class='line'>            <span class="nt">&lt;name&gt;</span>fs.default.name<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>            <span class="nt">&lt;value&gt;</span>hdfs://192.168.17.1:9000<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>            <span class="nt">&lt;description&gt;</span>The name of the default file system. A URI whose scheme and authority determine the FileSystem implementation.<span class="nt">&lt;/description&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Next open $HADOOP_HOME/conf/hdfs-site.xml and write content:</li>
</ul>


<figure class='code'><figcaption><span>hdfs-site.xml</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>dfs.replication<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>1<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>        <span class="nt">&lt;description&gt;</span>The actual number of replications can be specified when the file is created.<span class="nt">&lt;/description&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Now open $HADOOP_HOME/conf/mapred-site.xml and write content:</li>
</ul>


<figure class='code'><figcaption><span>mapred-site.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.job.tracker<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>192.168.17.1:9001<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>        <span class="nt">&lt;description&gt;</span>The host and port that the MapReduce job tracker runs at.<span class="nt">&lt;/description&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>And finally you need to change two more files first $HADOOP_HOME/conf/masters and second is $HADOOP_HOME/conf/slaves, not too hard to guess what should be contet of each one of these:</li>
</ul>


<figure class='code'><figcaption><span>masters </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>192.168.17.1</span></code></pre></td></tr></table></div></figure>


<p>and</p>

<figure class='code'><figcaption><span>slaves </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>192.168.17.1
</span><span class='line'>192.168.17.2</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve putted 192.168.17.1 in both files, since I&rsquo;d like to have master node to execute computational task as well and hold distributed data.</p>

<p>Now we proceed to the final steps of ssh configuration and actuall Hadoop startup.</p>

<h3><a id="ssh">Setup ssh configuration and configure public keys</a></h3>

<p>Configure master:</p>

<figure class='code'><figcaption><span>Generate public key for master node </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-key -t rsa</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Copy public key to slave node</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat ~/.ssh/id_rsa.pub | ssh 192.168.17.2 'cat >> .ssh/authorized_keys'</span></code></pre></td></tr></table></div></figure>


<p>Now same for slave:</p>

<figure class='code'><figcaption><span>Generate public key for slave node </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-key -t rsa</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Copy public key to master node</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat ~/.ssh/id_rsa.pub | ssh 192.168.17.1 'cat >> .ssh/authorized_keys'</span></code></pre></td></tr></table></div></figure>


<h3><a id="hadoop_startup">Hadoop startup</a></h3>

<p>Now after we have complete all configurations we need to run following commands in terminal on master (192.168.17.1) node:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo ./hadoop namenode -format
</span><span class='line'>sudo ./start-all.sh</span></code></pre></td></tr></table></div></figure>


<p><a href="http://hadoop.apache.org/docs/stable/cluster_setup.html">Here</a> you can find more details and explanations on how to configure and setup Hadoop cluster.</p>

<p>Obviously it&rsquo;s ridiculous to proceed all these steps each time I need to setup new Hadoop cluster, so in my next blog post I&rsquo;ll write how-to setup Hadoop cluster using <a href="http://www.vagrantup.com/">vagrant</a> and <a href="http://puppetlabs.com/">puppet</a> to enable automation of this procedure.</p>
]]></content>
  </entry>
  
</feed>
